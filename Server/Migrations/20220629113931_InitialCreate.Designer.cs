// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gRPCServer.Repos;

#nullable disable

namespace gRPCServer.Migrations
{
    [DbContext(typeof(WeatherStationContext))]
    [Migration("20220629113931_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shared.Domain.WeatherDataPoint", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvgWindSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Barometer")
                        .HasColumnType("int");

                    b.Property<int>("BattLevel")
                        .HasColumnType("int");

                    b.Property<int>("InsideHum")
                        .HasColumnType("int");

                    b.Property<int>("InsideTemp")
                        .HasColumnType("int");

                    b.Property<int>("OutsideHum")
                        .HasColumnType("int");

                    b.Property<int>("OutsideTemp")
                        .HasColumnType("int");

                    b.Property<int>("RainRate")
                        .HasColumnType("int");

                    b.Property<int>("SolarRad")
                        .HasColumnType("int");

                    b.Property<int>("StationTempId")
                        .HasColumnType("int");

                    b.Property<int>("Sunrise")
                        .HasColumnType("int");

                    b.Property<int>("Sunset")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Ts")
                        .HasColumnType("int");

                    b.Property<int>("UvLevel")
                        .HasColumnType("int");

                    b.Property<int>("WindDir")
                        .HasColumnType("int");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("int");

                    b.Property<int>("XmitBatt")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.HasIndex("StationTempId");

                    b.ToTable("WeatherDataPoint");
                });

            modelBuilder.Entity("Shared.Domain.WeatherStation", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StationId");

                    b.ToTable("WeatherStation");
                });

            modelBuilder.Entity("Shared.Domain.WeatherDataPoint", b =>
                {
                    b.HasOne("Shared.Domain.WeatherStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });
#pragma warning restore 612, 618
        }
    }
}
